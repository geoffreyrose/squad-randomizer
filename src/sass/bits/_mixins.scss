@use 'sass:map';
@use 'sass:string';
@use 'setup';

@mixin breakpoint($class) {
    @if $class == small {
        @media (max-width: map.get(setup.$breakpoints, small)) {
            @content;
        }
    } @else if $class == medium {
        @media (min-width: map.get(setup.$breakpoints, medium)) {
            @content;
        }
    } @else if $class == large {
        @media (min-width: map.get(setup.$breakpoints, large)) {
            @content;
        }
    } @else if $class == xlarge {
        @media (min-width: map.get(setup.$breakpoints, xlarge)) {
            @content;
        }
    } @else if $class == xxlarge {
        @media (min-width: map.get(setup.$breakpoints, xxlarge)) {
            @content;
        }
    }
}

@mixin heading-font-light {
    font-family: setup.$heading-font, setup.$heading-fallback;
    font-style: normal;
    font-weight: 300;
}

@mixin heading-font-regular {
    font-family: setup.$heading-font, setup.$heading-fallback;
    font-style: normal;
    font-weight: 400;
}

@mixin heading-font-regular-italic {
    font-family: setup.$heading-font, setup.$heading-fallback;
    font-style: italic;
    font-weight: 400;
}

@mixin heading-font-bold {
    font-family: setup.$heading-font, setup.$heading-fallback;
    font-style: normal;
    font-weight: 700;
}

@mixin heading-font-extra-bold {
    font-family: setup.$heading-font, setup.$heading-fallback;
    font-style: normal;
    font-weight: 900;
}

@mixin heading-font-bold-italic {
    font-family: setup.$heading-font, setup.$heading-fallback;
    font-style: italic;
    font-weight: 700;
}

@mixin body-font-light {
    font-family: setup.$body-font, setup.$body-fallback;
    font-style: normal;
    font-weight: 300;
}

@mixin body-font-regular {
    font-family: setup.$body-font, setup.$body-fallback;
    font-style: normal;
    font-weight: 400;
}

@mixin body-font-italic {
    font-family: setup.$body-font, setup.$body-fallback;
    font-style: italic;
    font-weight: 400;
}

@mixin body-font-bold {
    font-family: setup.$body-font, setup.$body-fallback;
    font-style: normal;
    font-weight: 700;
}

@mixin linear-gradient($from-color, $to-color) {
    background-image: linear-gradient(to left, $from-color, $to-color);
}

@mixin radial-gradient($from-color, $to-color) {
    background-image: radial-gradient(ellipse at center, $from-color, $to-color);
}

@mixin single-transition($property: all, $speed: .2s, $ease: ease-in-out) {
    transition: $property $speed $ease;
}

@mixin double-transition($property: background, $property2: color, $speed: .2s, $ease: ease-in-out) {
    transition: $property $speed $ease, $property2 $speed $ease;
}

// https://codepen.io/maxakohler/pen/mAxHz?editors=1100
@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right) {
    $shadow: '';

    @if $skew == false or $type == text {
        @if $direction == right {
            @for $i from 0 to $length - 1 {
                $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
            }
        }

        @if $direction == left {
            @for $i from 0 to $length - 1 {
                $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
            }
        }
    }

    @if $fadeout == true {
        @for $i from 1 to $length - 1 {
            @if $type == text or $skew == false {
                @if $direction == right {
                    $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + rgba($color, 1 - $i / $length) + ',';
                }

                @if $direction == left {
                    $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + rgba($color, 1 - $i / $length) + ',';
                }
            }

            @if ($type == box) and $skew == true {
                @if $direction == right {
                    $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
                }

                @if $direction == left {
                    $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
                }
            }
        }

        $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
    }

    @if $fadeout == false {
        @if $skew == true and ($type == box) {
            @for $i from 0 to $length - 1 {
                $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
            }
        }

        $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
    }

    $shadow: string.unquote($shadow);

    @if $type == 'box' {
        box-shadow: $shadow;
    }

    @if $type == 'text' {
        text-shadow: $shadow;
    }
}

// taken from https://github.com/foundation/foundation-sites/blob/258d9eb3432d7e497f41b4554f4116d5c59c92a8/scss/util/_mixins.scss
// Removes the focus ring around an element when a mouse input is detected.
@mixin disable-mouse-outline {
    [data-whatinput='mouse'] & {
        outline: 0;
    }
}
